{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/kdborda/TensorFlow-PyTorch/blob/main/model.onnx\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 33,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "vkxOm7FNvAlg",
        "outputId": "46013ea7-faf0-4f3d-d31b-dc68fd73815a"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Requirement already satisfied: onnx in /usr/local/lib/python3.11/dist-packages (1.18.0)\n",
            "Requirement already satisfied: numpy>=1.22 in /usr/local/lib/python3.11/dist-packages (from onnx) (2.0.2)\n",
            "Requirement already satisfied: protobuf>=4.25.1 in /usr/local/lib/python3.11/dist-packages (from onnx) (5.29.5)\n",
            "Requirement already satisfied: typing_extensions>=4.7.1 in /usr/local/lib/python3.11/dist-packages (from onnx) (4.14.0)\n"
          ]
        }
      ],
      "source": [
        "!pip install onnx\n",
        "\n",
        "import time\n",
        "import numpy as np\n",
        "import tensorflow as tf\n",
        "import torch\n",
        "import torch.nn as nn\n",
        "import torch.optim as optim\n",
        "from torchvision import datasets, transforms\n",
        "from torch.utils.data import DataLoader\n",
        "from tensorflow.keras.datasets import mnist\n",
        "from tensorflow.keras.models import Sequential\n",
        "from tensorflow.keras.layers import Dense, Flatten\n",
        "from tensorflow.keras.utils import to_categorical\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 34,
      "metadata": {
        "id": "pUR64u1dvZQA"
      },
      "outputs": [],
      "source": [
        "(x_train, y_train), (x_test, y_test) = mnist.load_data()\n",
        "x_train = x_train.astype(\"float32\") / 255.0\n",
        "x_test = x_test.astype(\"float32\") / 255.0\n",
        "\n",
        "x_train_flat = x_train.reshape(-1, 784)\n",
        "x_test_flat = x_test.reshape(-1, 784)\n",
        "\n",
        "y_train_cat = to_categorical(y_train, 10)\n",
        "y_test_cat = to_categorical(y_test, 10)\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 35,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "we_BKbeRvgPN",
        "outputId": "209209f6-9b54-4346-f9e8-6d92eefabab0"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.11/dist-packages/keras/src/layers/reshaping/flatten.py:37: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n",
            "  super().__init__(**kwargs)\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/5\n",
            "1875/1875 - 8s - 4ms/step - accuracy: 0.9142 - loss: 0.3012\n",
            "Epoch 2/5\n",
            "1875/1875 - 11s - 6ms/step - accuracy: 0.9568 - loss: 0.1486\n",
            "Epoch 3/5\n",
            "1875/1875 - 15s - 8ms/step - accuracy: 0.9677 - loss: 0.1081\n",
            "Epoch 4/5\n",
            "1875/1875 - 4s - 2ms/step - accuracy: 0.9747 - loss: 0.0840\n",
            "Epoch 5/5\n",
            "1875/1875 - 7s - 4ms/step - accuracy: 0.9787 - loss: 0.0689\n",
            "TensorFlow Training Time: 49.61 seconds\n"
          ]
        }
      ],
      "source": [
        "tf_model = Sequential([\n",
        "    Flatten(input_shape=(28, 28)),\n",
        "    Dense(64, activation='relu'),\n",
        "    Dense(10, activation='softmax')\n",
        "])\n",
        "\n",
        "tf_model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])\n",
        "\n",
        "start_time = time.time()\n",
        "tf_model.fit(x_train, y_train_cat, epochs=5, batch_size=32, verbose=2)\n",
        "tf_training_time = time.time() - start_time\n",
        "print(f\"TensorFlow Training Time: {tf_training_time:.2f} seconds\")\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 36,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "cgDYyEAkvsoB",
        "outputId": "a3fadb98-c243-4751-e700-a17bc4548381"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "TensorFlow Test Accuracy: 0.9722\n",
            "TensorFlow Inference Time: 1.0876 seconds\n"
          ]
        }
      ],
      "source": [
        "start_time = time.time()\n",
        "loss, acc = tf_model.evaluate(x_test, y_test_cat, verbose=0)\n",
        "tf_inference_time = time.time() - start_time\n",
        "print(f\"TensorFlow Test Accuracy: {acc:.4f}\")\n",
        "print(f\"TensorFlow Inference Time: {tf_inference_time:.4f} seconds\")\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 37,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "hWZ1dU4UvzOf",
        "outputId": "c9557701-41a7-403b-abf7-715fb1a82090"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Saved artifact at '/tmp/tmppceyan43'. The following endpoints are available:\n",
            "\n",
            "* Endpoint 'serve'\n",
            "  args_0 (POSITIONAL_ONLY): TensorSpec(shape=(None, 28, 28), dtype=tf.float32, name='keras_tensor_12')\n",
            "Output Type:\n",
            "  TensorSpec(shape=(None, 10), dtype=tf.float32, name=None)\n",
            "Captures:\n",
            "  135590483682576: TensorSpec(shape=(), dtype=tf.resource, name=None)\n",
            "  135590456618704: TensorSpec(shape=(), dtype=tf.resource, name=None)\n",
            "  135590456608528: TensorSpec(shape=(), dtype=tf.resource, name=None)\n",
            "  135590456610064: TensorSpec(shape=(), dtype=tf.resource, name=None)\n",
            "TensorFlow model converted to model.tflite\n"
          ]
        }
      ],
      "source": [
        "converter = tf.lite.TFLiteConverter.from_keras_model(tf_model)\n",
        "tflite_model = converter.convert()\n",
        "with open(\"/content/drive/MyDrive/Colab Notebooks/EM Report/model.tflite\", \"wb\") as f:\n",
        "    f.write(tflite_model)\n",
        "print(\"TensorFlow model converted to model.tflite\")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 38,
      "metadata": {
        "id": "7eBI6f7rv8Sy",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "fea9625c-73df-4075-8244-de7fee7ed690"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "100%|██████████| 9.91M/9.91M [00:00<00:00, 126MB/s]\n",
            "100%|██████████| 28.9k/28.9k [00:00<00:00, 54.8MB/s]\n",
            "100%|██████████| 1.65M/1.65M [00:00<00:00, 98.1MB/s]\n",
            "100%|██████████| 4.54k/4.54k [00:00<00:00, 1.35MB/s]\n"
          ]
        }
      ],
      "source": [
        "transform = transforms.Compose([transforms.ToTensor()])\n",
        "train_dataset = datasets.MNIST(root='/content/drive/MyDrive/Colab Notebooks/EM Report', train=True, transform=transform, download=True)\n",
        "test_dataset = datasets.MNIST(root='/content/drive/MyDrive/Colab Notebooks/EM Report', train=False, transform=transform)\n",
        "\n",
        "train_loader = DataLoader(train_dataset, batch_size=32, shuffle=True)\n",
        "test_loader = DataLoader(test_dataset, batch_size=32, shuffle=False)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 39,
      "metadata": {
        "id": "nNjh5KkIwCVV"
      },
      "outputs": [],
      "source": [
        "class PyTorchModel(nn.Module):\n",
        "    def __init__(self):\n",
        "        super(PyTorchModel, self).__init__()\n",
        "        self.fc1 = nn.Linear(784, 64)\n",
        "        self.relu = nn.ReLU()\n",
        "        self.fc2 = nn.Linear(64, 10)\n",
        "\n",
        "    def forward(self, x):\n",
        "        x = x.view(-1, 784)\n",
        "        x = self.relu(self.fc1(x))\n",
        "        return self.fc2(x)\n",
        "\n",
        "device = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n",
        "pt_model = PyTorchModel().to(device)\n",
        "criterion = nn.CrossEntropyLoss()\n",
        "optimizer = optim.Adam(pt_model.parameters(), lr=0.001)\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 40,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "HF5sARAIwHRm",
        "outputId": "e8d40a54-88a6-4f3c-b73d-6247f4bbc040"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "PyTorch Training Time: 90.49 seconds\n"
          ]
        }
      ],
      "source": [
        "start_time = time.time()\n",
        "pt_model.train()\n",
        "for epoch in range(5):\n",
        "    for data, target in train_loader:\n",
        "        data, target = data.to(device), target.to(device)\n",
        "        optimizer.zero_grad()\n",
        "        output = pt_model(data)\n",
        "        loss = criterion(output, target)\n",
        "        loss.backward()\n",
        "        optimizer.step()\n",
        "pt_training_time = time.time() - start_time\n",
        "print(f\"PyTorch Training Time: {pt_training_time:.2f} seconds\")\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 41,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "GQcvEMatwcqC",
        "outputId": "19dc41e4-c29e-4deb-bbab-3a0a9a364722"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "PyTorch Test Accuracy: 0.9719\n",
            "PyTorch Inference Time: 3.9711 seconds\n"
          ]
        }
      ],
      "source": [
        "pt_model.eval()\n",
        "correct = 0\n",
        "total = 0\n",
        "start_time = time.time()\n",
        "with torch.no_grad():\n",
        "    for data, target in test_loader:\n",
        "        data, target = data.to(device), target.to(device)\n",
        "        output = pt_model(data)\n",
        "        pred = output.argmax(dim=1)\n",
        "        correct += (pred == target).sum().item()\n",
        "        total += target.size(0)\n",
        "pt_inference_time = time.time() - start_time\n",
        "print(f\"PyTorch Test Accuracy: {correct / total:.4f}\")\n",
        "print(f\"PyTorch Inference Time: {pt_inference_time:.4f} seconds\")\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 42,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "iLv22yn-wh3E",
        "outputId": "e7d23486-f2d0-4879-dc03-6ceb36b89cd0"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "PyTorch model converted to model.onnx\n"
          ]
        }
      ],
      "source": [
        "dummy_input = torch.randn(1, 784).to(device)\n",
        "torch.onnx.export(pt_model, dummy_input, \"/content/drive/MyDrive/Colab Notebooks/EM Report/model.onnx\", input_names=[\"input\"], output_names=[\"output\"])\n",
        "print(\"PyTorch model converted to model.onnx\")"
      ]
    }
  ],
  "metadata": {
    "colab": {
      "provenance": [],
      "mount_file_id": "1BC8BH-Rbwt6X_NvDc1YZnot9l6Cl6FfX",
      "authorship_tag": "ABX9TyMcfoMy5I6cXMU0mqlP8U3y",
      "include_colab_link": true
    },
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}